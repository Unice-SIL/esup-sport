<?php

namespace UcaBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\Validator\Constraints\DateTime;
use UcaBundle\Service\Common\Previsualisation;

/**
 * ActiviteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormatSimpleRepository extends FormatActiviteRepository
{

    public function PromotionsPagination($page, $nbMaxParPage, $user){

        $qb = $this->createQueryBuilder('a');
        $qb->orderBy('a.dateDebutEffective', 'ASC');   
        
        $this->previsualisation($qb, $user, "a");
        
        $query = $qb->getQuery();

        $premierResultat = ($page - 1) * $nbMaxParPage;
        $query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
        $paginator = new Paginator($query); 

        return $paginator;
    }

    public function findByPromouvoir($user){
        $qb = $this
        ->createQueryBuilder('f')
        ->andWhere("f.promouvoir = true")
        ->orderBy('f.dateDebutEffective', 'ASC');

        $this->previsualisation($qb, $user, "f");

        return $qb
        ->getQuery()
        ->getResult();
    }

    public function previsualisation($qb, $user, $alias){
        $now = new \DateTime();

        if(!Previsualisation::$IS_ACTIVE){
            $qb
            ->andWhere($alias.".dateDebutPublication < :date")
            ->andWhere($alias.".dateFinPublication > :date")
            ->andWhere($alias.".statut = 1")
            ->setParameter("date", $now->format('Y-m-d H:i:s'));
        
            if($user != null){
                $qb
                ->leftJoin($alias.".profilsUtilisateurs", "p")
                ->leftJoin("p.utilisateur", "u")
                ->andWhere("u.id = :idUtilisateur")
                ->setParameter("idUtilisateur", $user->getId());
            }
        }
        else{
            $this->enCoursPublication($qb, $alias);
        }
        return $qb;
    }

}

