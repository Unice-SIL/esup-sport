var Encore = require('@symfony/webpack-encore');
var path = require("path");

Encore
    /*
    * CORE CONFIG
    */

    // Chemin où sera compilé les assets
    .setOutputPath('web/build/')

    // Chemin utilisé par le serveur pour accéder aux assets compilés
    .setPublicPath('/Suaps/web/build')

    /*
     * ENTRY CONFIG
     */

    // global
    //.addEntry('semantic-ui', './assets/js/global/semantic-ui.js')
    .addEntry('suaps', './assets/suaps.js')
    // .createSharedEntry('suaps', './assets/suaps.js')

    // internal
    // .addEntry('login', './assets/js/security/login.js')
    // .addEntry('internal', './assets/js/security/internal.js')

    /*
     * FEATURE CONFIG
     */

    // Copie des images statiques vers le chemin de destination des assets
    // .copyFiles({
    //     from: './assets/images',
    //     to: 'images/[path][name].[ext]',
    //     pattern: /\.(png|jpg|jpeg)$/
    // })

    // Nettoie le chemin de sortie entre chaque construction
    .cleanupOutputBeforeBuild()

    // Active SCSS / SASS
    // .enableSassLoader()

    // Active LESS
    // .enableLessLoader()

    // Notification de construction activé
    // .enableBuildNotifications()

    // Accès facile à la lecture des fichiers CSS / JS
    .enableSourceMaps(!Encore.isProduction())

    // Versionning des fichiers CSS / JS
    .enableVersioning(!Encore.isProduction())

    // Scinde le code si plusieurs fichiers nécessitent une bibliothèque précise (exemple avec jQuery)
    .splitEntryChunks()

    // Contrôle permettant de configurer la taille minimum en octect pour générer un scindage
    .configureSplitChunks(function(splitChunks) {
        splitChunks.minSize = 30000;
    })

    // Chargement automatique de jQuery sur l'ensemble de l'application
    
    .autoProvideVariables({
        $: 'jquery',
        jQuery: 'jquery',
        'window.jQuery': 'jquery',
    })

    // Si deux fichiers d'entrées exigent la même module => ils auront besoin du même objet
    .enableSingleRuntimeChunk()
;

config = Encore.getWebpackConfig();

// config.resolve.alias = {
//     '../../theme.config$': path.join(__dirname, 'assets/css/global/semantic-ui/theme.config')
// };

module.exports = config;